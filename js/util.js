function showDialog(e) {	dialog_e = e;	var point = new BMap.Point(e.point.lng, e.point.lat);	var textHtml =  "<div class='row'>" + 						"<form class='form-inline' role='form'>" + 							"<div class='form-group col-md-1'>" + 								"<input id='text_radius' class='form-control' style='width:188px;' type='text' placeholder='Please input the radius'>" + 							"</div>" + 						"</form>" + 					"</div>";	var textareaHtml = "<form role='form' style='margin-top:10px;'>" +						  "<div class='form-group'>" + 							"<textarea id='textarea_comment' class='form-control' rows='3' placeholder='Please input comment'></textarea>" + 						  "</div>" + 						"</form>";	var buttonHtml = "<div class='row' style='margin-top:15px;'>" + 						"<form class='form-inline' role='form'>" + 							"<input id='btn-confirm' class='btn btn-success button-b' type='button' value='确定' onclick='confirm(dialog_e)'>" + 							"<input id='btn-confirm' class='btn btn-danger button-a' type='button' value='取消' onclick='cancel(dialog_e)'>" + 						"</form>" + 					"</div>";	var dialogContent = "<div class='panel panel-info'>" + 						    "<div class='panel-heading'>" + 							    "<h3 class='panel-title'>" + 								    "Throw bomber" + 								"</h3>" + 						    "</div>" + 						    "<div class='panel-body'>" + 							    textHtml + 								textareaHtml + 								buttonHtml + 						    "</div>" + 						"</div>";	var opts = {enableMessage: false};	var infoWindow = new BMap.InfoWindow(dialogContent, opts);	this.openInfoWindow(infoWindow, point); 
}function confirm(e) {	var radius = $("#text_radius").val();	var comment = $("#textarea_comment").val();	if(radius == '' || isNaN(radius)) {		$("#text_radius").focus();	} else if(comment == '') {		$("#textarea_comment").focus();
	} else {		e.target.closeInfoWindow();		var point = new BMap.Point(e.point.lng, e.point.lat);		var circle = new BMap.Circle(point, radius * 100, {fillColor: "blue", strokeWeight: 1, fillOpacity: 0.2, strokeOpacity: 0.3});		circle.addEventListener("mouseover", circle_mouseover);		circle.addEventListener("mouseout", circle_mouseout);		circle.addEventListener("click", circle_click);		circle.comment = comment;		e.target.addOverlay(circle);				circle.centerPoint = circle.getCenter();		circle.radius = circle.getRadius();		circleArray.push(circle);
	}
}function cancel(e) {	e.target.closeInfoWindow();
}function search() {	var local = new BMap.LocalSearch(map, {		renderOptions:{map: map}	});	local.search($("#search_text").val());
}function circle_mouseover(event) {	var circle = event.target;	circle.setFillOpacity(circle.getFillOpacity() + 0.2);
}function circle_mouseout(event) {	var circle = event.target;	circle.setFillOpacity(circle.getFillOpacity() - 0.2);}function circle_click(event) {	var circle = event.target;	alert(circle.comment);}function switchToPullBox() {	searchInRect.open();	$('#pullBox').attr('disabled', true);
}function pullComplete() {	for(var i in circleArray) {		if(isCross(pullBox, circleArray[i])) {			console.info(circleArray[i].comment);
		}
	}		$('#pullBox').attr('disabled', false);
}//判断矩形和圆是否有重叠部分：先判断圆心是否在矩形内部，否则判断圆心到矩形四个顶点的最短距离是否小于半径   /////不全，需要判断圆心在矩形九块区域中哪个区域//注：判断圆心是否在矩形内部不能通过坐标大小比较，因为小数点后面保留位数的关系。所以采用圆心到四条边的距离是否都小于相应的边长判断。//rec: {startPoint:{}, endPoint:{}}, cir: {centerPoint:{}, radius:r}function isCross(rec, cir) {	var x0 = cir.centerPoint.lng;console.info('x0: '+x0);	var y0 = cir.centerPoint.lat;console.info('y0: '+y0);	var x1 = rec.startPoint.lng;console.info('x1: '+x1);	var y1 = rec.startPoint.lat;console.info('y1: '+y1);	var x2 = rec.endPoint.lng;console.info('x2: '+x2);	var y2 = rec.endPoint.lat;console.info('y2: '+y2);	var x3 = x2;	var y3 = y1;	var x4 = x1;	var y4 = y2;	//矩形边长	var t1 = map.getDistance(new BMap.Point(x1, y1), new BMap.Point(x4, y4));	var t2 = map.getDistance(new BMap.Point(x3, y3), new BMap.Point(x2, y2));	//圆心到四条边的距离	var s1 = map.getDistance(cir.centerPoint, new BMap.Point(x1, y0));	var s2 = map.getDistance(cir.centerPoint, new BMap.Point(x2, y0));	var s3 = map.getDistance(cir.centerPoint, new BMap.Point(x0, y1));	var s4 = map.getDistance(cir.centerPoint, new BMap.Point(x0, y2));	//圆心到四个顶点的距离	var d1 = map.getDistance(cir.centerPoint, new BMap.Point(x1, y1));console.info('d1: '+d1);	var d2 = map.getDistance(cir.centerPoint, new BMap.Point(x2, y2));console.info('d2: '+d2);	var d3 = map.getDistance(cir.centerPoint, new BMap.Point(x3, y3));console.info('d3: '+d3);	var d4 = map.getDistance(cir.centerPoint, new BMap.Point(x4, y4));console.info('d4: '+d4);	var dmin = Math.min(d1, d2, d3, d4);console.info('dmin: '+dmin);console.info('cir.radius: '+cir.radius);	if (s1 < t2 && s2 < t2 && s3 > t1 && s4 < t1) {		console.info('111111111111111111');		return true;
	} else if (dmin < cir.radius) {		console.info('222222222222222222');		return true
	}	return false;
}